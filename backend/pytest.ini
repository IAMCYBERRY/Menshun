[tool:pytest]
# =============================================================================
# Menshun Backend - Pytest Configuration
# =============================================================================

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 7.0

# Add project root to Python path
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=app
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=term-missing
    --cov-fail-under=80
    --no-cov-on-fail
    --durations=10
    --doctest-modules
    --doctest-ignore-import-errors

# Markers for test categorization
markers =
    unit: Unit tests
    integration: Integration tests
    api: API endpoint tests
    database: Database tests
    auth: Authentication tests
    slow: Slow tests (skipped by default)
    security: Security tests
    compliance: Compliance tests
    smoke: Smoke tests for critical functionality

# Test environment
env =
    TESTING = true
    DATABASE_URL = sqlite:///./test.db
    REDIS_URL = redis://localhost:6379/15
    SECRET_KEY = test-secret-key-for-testing-only
    ALGORITHM = HS256
    ACCESS_TOKEN_EXPIRE_MINUTES = 30
    AZURE_CLIENT_ID = test-client-id
    AZURE_CLIENT_SECRET = test-client-secret
    AZURE_TENANT_ID = test-tenant-id

# Asyncio configuration
asyncio_mode = auto

# Warnings
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning

# Coverage configuration
[coverage:run]
source = app
omit = 
    app/main.py
    app/__init__.py
    app/scripts/*
    tests/*
    */venv/*
    */virtualenv/*
    */.tox/*
    */site-packages/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml