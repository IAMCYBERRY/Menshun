# Menshun Backend - Python Project Configuration
# This file contains configuration for build tools, linting, testing, and project metadata

[build-system]
requires = ["setuptools>=65.0", "wheel", "setuptools-scm>=8.0"]
build-backend = "setuptools.build_meta"

[project]
name = "menshun-backend"
description = "Enterprise Privileged Access Management - Backend API"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Menshun Security Team", email = "security@company.com"},
]
maintainers = [
    {name = "Security Engineering", email = "security-engineering@company.com"},
]
keywords = [
    "pam", "privileged-access-management", "security", "azure-ad", 
    "fastapi", "enterprise", "compliance", "audit"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: System :: Systems Administration :: Authentication/Directory",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: FastAPI",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.23",
    "alembic>=1.12.1",
    "psycopg2-binary>=2.9.9",
    "redis>=5.0.1",
    "celery[redis]>=5.3.4",
    "msal>=1.25.0",
    "microsoft-graph>=1.3.0",
    "azure-identity>=1.15.0",
    "azure-keyvault-secrets>=4.7.0",
    "pydantic[email]>=2.5.0",
    "cryptography>=41.0.7",
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.3.0",
    "structlog>=23.2.0",
    "sentry-sdk[fastapi]>=1.38.0",
    "python-dotenv>=1.0.0",
    "httpx>=0.25.2",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "pre-commit>=3.6.0",
]
docs = [
    "sphinx>=7.2.6",
    "sphinx-rtd-theme>=1.3.0",
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "mkdocstrings[python]>=0.24.0",
]
test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.2",
    "faker>=20.1.0",
    "factory-boy>=3.3.0",
]

[project.urls]
Homepage = "https://github.com/your-org/menshun"
Documentation = "https://docs.menshun.com"
Repository = "https://github.com/your-org/menshun.git"
Issues = "https://github.com/your-org/menshun/issues"
Changelog = "https://github.com/your-org/menshun/blob/main/CHANGELOG.md"

[project.scripts]
menshun-backend = "app.cli:main"
menshun-migrate = "app.scripts.migrate:main"
menshun-seed = "app.scripts.seed_roles:main"

# =============================================================================
# Tool Configuration
# =============================================================================

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]
exclude = ["tests*", "*.tests*"]

[tool.setuptools_scm]
write_to = "app/_version.py"
version_scheme = "guess-next-dev"
local_scheme = "dirty-tag"

# =============================================================================
# Black Code Formatter
# =============================================================================
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# =============================================================================
# isort Import Sorter
# =============================================================================
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["app"]
known_third_party = [
    "fastapi", "pydantic", "sqlalchemy", "alembic", "celery", 
    "redis", "msal", "azure", "microsoft", "structlog", "pytest"
]
sections = [
    "FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"
]
skip_glob = ["*/migrations/*", "*/alembic/*"]

# =============================================================================
# MyPy Static Type Checker
# =============================================================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Exclude patterns
exclude = [
    '^migrations/',
    '^alembic/',
    '^tests/fixtures/',
]

# Third-party libraries without type stubs
[[tool.mypy.overrides]]
module = [
    "celery.*",
    "kombu.*",
    "msal.*",
    "microsoft.*",
    "azure.*",
]
ignore_missing_imports = true

# =============================================================================
# Pytest Testing Framework
# =============================================================================
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--junitxml=junit.xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "azure: Tests requiring Azure AD",
    "database: Tests requiring database",
    "redis: Tests requiring Redis",
    "celery: Tests requiring Celery",
    "security: Security-related tests",
    "compliance: Compliance-related tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# =============================================================================
# Coverage Configuration
# =============================================================================
[tool.coverage.run]
source = ["app"]
omit = [
    "*/migrations/*",
    "*/alembic/*",
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
    "*/settings.py",
    "app/_version.py",
]
branch = true
concurrency = ["thread", "greenlet"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "TYPE_CHECKING",
]

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"

# =============================================================================
# Bandit Security Linter
# =============================================================================
[tool.bandit]
exclude_dirs = ["tests", "migrations", "alembic"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in tests
severity = "medium"

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

# =============================================================================
# Flake8 Linting (via pyproject-flake8)
# =============================================================================
[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # Whitespace before ':'
    "E501",  # Line too long (handled by black)
    "W503",  # Line break before binary operator
    "E231",  # Missing whitespace after ','
]
exclude = [
    ".git",
    "__pycache__",
    "migrations",
    "alembic",
    ".venv",
    "venv",
    "dist",
    "build",
    "*.egg-info",
]
per-file-ignores = [
    "__init__.py:F401",  # Imported but unused
    "*/settings.py:F403,F405",  # Star imports
]
max-complexity = 12
docstring-convention = "google"

# =============================================================================
# Ruff Linter (Alternative to Flake8)
# =============================================================================
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # Line too long (handled by black)
    "B008",  # Do not perform function calls in argument defaults
    "C901",  # Too complex (handled by complexity check)
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
    "alembic",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"*/settings.py" = ["F403", "F405"]
"*/test_*.py" = ["ARG", "S101"]

[tool.ruff.isort]
known-first-party = ["app"]

# =============================================================================
# Vulture Dead Code Finder
# =============================================================================
[tool.vulture]
exclude = ["migrations/", "alembic/"]
ignore_decorators = ["@app.route", "@celery.task", "@property"]
ignore_names = ["_*", "test_*"]
make_whitelist = true
min_confidence = 60
paths = ["app"]
sort_by_size = true

# =============================================================================
# Pylint Configuration
# =============================================================================
[tool.pylint.main]
load-plugins = [
    "pylint.extensions.docparams",
    "pylint.extensions.docstyle",
    "pylint.extensions.mccabe",
]

[tool.pylint.messages_control]
disable = [
    "missing-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "line-too-long",  # Handled by black
]

[tool.pylint.format]
max-line-length = 88

# =============================================================================
# Semantic Versioning
# =============================================================================
[tool.semantic_release]
version_variable = "app/__init__.py:__version__"
build_command = "python -m build"
dist_path = "dist/"
upload_to_pypi = false
upload_to_release = true
hvcs = "github"
commit_author = "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

# =============================================================================
# Documentation Tools
# =============================================================================
[tool.sphinx]
source-dir = "docs"
build-dir = "docs/_build"

[tool.pydocstyle]
convention = "google"
match-dir = "(?!migrations|alembic).*"
match = "(?!test_).*\\.py"